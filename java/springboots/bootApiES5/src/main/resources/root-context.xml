<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:int="http://www.springframework.org/schema/integration"
       xmlns:int-http="http://www.springframework.org/schema/integration/http"
       xmlns:cache="http://www.springframework.org/schema/cache"
       xmlns:int-groovy="http://www.springframework.org/schema/integration/groovy"
       xmlns:elasticsearch="http://www.springframework.org/schema/data/elasticsearch"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
            http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
            http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache.xsd
            http://www.springframework.org/schema/integration/http http://www.springframework.org/schema/integration/http/spring-integration-http.xsd
            http://www.springframework.org/schema/integration/groovy http://www.springframework.org/schema/integration/groovy/spring-integration-groovy.xsd
            http://www.springframework.org/schema/data/elasticsearch http://www.springframework.org/schema/data/elasticsearch/spring-elasticsearch.xsd">

    <context:property-placeholder/>

    <context:annotation-config/>

    <bean class="com.fasterxml.jackson.databind.ObjectMapper" id="objectMapper"/>

    <import resource="awsS3UploadFromClient.xml"/>
    <import resource="awsS3Download.xml"/>
    <import resource="config.per.client.service.xml"/>
    <import resource="transcodingServices.xml"/>
    <import resource="login.verify.xml"/>
    <import resource="reporting.solr.query.xml"/>

    <bean class="com.amazonaws.auth.BasicAWSCredentials" id="basicAWSCredentials">
        <constructor-arg value="${runtimeAwsAccessKeyId}"/>
        <constructor-arg value="${runtimeAwsSecretAccessKey}"/>
    </bean>
    <bean class="com.amazonaws.auth.AWSStaticCredentialsProvider">
        <constructor-arg ref="basicAWSCredentials"/>
    </bean>
    <bean class="com.amazonaws.services.dynamodbv2.AmazonDynamoDBClient">
        <constructor-arg ref="basicAWSCredentials"/>
    </bean>
    <bean id="s3Client" class="com.amazonaws.services.s3.AmazonS3Client">
        <constructor-arg ref="basicAWSCredentials"/>
        <constructor-arg>
            <bean class="com.amazonaws.ClientConfiguration">
                <property name="signerOverride" value="S3SignerType"/>
            </bean>
        </constructor-arg>
    </bean>

    <bean id="sqsClient" class="com.amazonaws.services.sqs.AmazonSQSClient"/>

    <bean class="com.flashflexpro.graniteamf.SimpleGraniteConfig">
        <constructor-arg>
            <bean class="org.granite.messaging.amf.io.RegexAMF3DeserializerSecurizer">
                <property name="param"
                          value="#{'(^com\.customshow\..+|^com\.flashflexpro\..+|^flex\.messaging\.io\..+)'}"/>
            </bean>
        </constructor-arg>
    </bean>

    <bean id="amfConverterMysql" class="org.pubanatomy.amfspringmvc.FlashAMFHttpConverter"/>
    <int-http:inbound-gateway request-channel="inputChannel" reply-channel="outputChannel"
                              supported-methods="POST" message-converters="amfConverterMysql" payload-expression="body"
                              path="/{path}/{serviceName}/{methodName}/{csSessionId}">
        <int-http:header name="path" expression="#pathVariables.path"/>
        <int-http:header name="serviceName" expression="#pathVariables.serviceName"/>
        <int-http:header name="methodName" expression="#pathVariables.methodName"/>
        <int-http:header name="csSessionId" expression="#pathVariables.csSessionId"/>
    </int-http:inbound-gateway>


    <int:channel id="inputChannel"/>
    <int:channel id="outputChannel"/>


    <int:chain input-channel="inputChannel" output-channel="outputChannel">
        <int:service-activator ref="rpcServiceInvoker" method="callServiceMethod"/>
    </int:chain>

    <bean id="rpcServiceInvoker" class="org.pubanatomy.siutils.RPCServiceInvoker">
        <constructor-arg>
            <map>
                <entry key="awsS3UploadService" value-ref="awsS3UploadService"/>
                <entry key="awsS3DownloadService" value-ref="awsS3DownloadService"/>
                <entry key="configPerClientService" value-ref="configPerClientService"/>
                <entry key="transcodingService" value-ref="transcodingService"/>
                <entry key="configPerClientService" value-ref="configPerClientService"/>


                <entry key="cSReportingSlideViewStats" value-ref="cSReportingSlideViewStats"/>
                <entry key="cSReportingShowSessionStats" value-ref="cSReportingShowSessionStats"/>

                <entry key="activity" value-ref="activity"/>
                <entry key="slideduration" value-ref="slideduration"/>
                <entry key="presduration" value-ref="presduration"/>
                <entry key="showduration" value-ref="showduration"/>


                <entry key="searchQueryService" value-ref="searchQuery"/>


                <entry key="logging">
                    <bean class="org.pubanatomy.siutils.FlashLogging"/>
                </entry>
            </map>
        </constructor-arg>
    </bean>


    <elasticsearch:transport-client id="client" client-transport-sniff="false"
                                    cluster-name="elasticsearch" cluster-nodes="${queryElasticsearchUrl}"/>
    <bean id="elasticsearchTemplate"
          class="org.springframework.data.elasticsearch.core.ElasticsearchTemplate">
        <constructor-arg name="client" ref="client"/>
    </bean>


    <bean id="searchQuery" class="SearchQueryService">
        <constructor-arg value="${elasticsearchRESTURLs}"/>
        <constructor-arg value="${searchIndexName}"/>
    </bean>

    <int:logging-channel-adapter channel="errorChannel" level="DEBUG"/>

</beans>
