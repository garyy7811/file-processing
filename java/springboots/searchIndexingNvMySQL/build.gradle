import org.apache.http.HttpHost
import org.apache.http.entity.ContentType
import org.apache.http.nio.entity.NStringEntity
import org.elasticsearch.client.Response
import org.elasticsearch.client.RestClient

dependencies {
    compile project( ":java_modules:java.search.query" )
    compile "org.springframework.boot:spring-boot-starter-data-redis"
    compile "mysql:mysql-connector-java:5.1.43"
    compile "org.apache.commons:commons-dbcp2:2.1"

    compile "org.springframework.integration:spring-integration-jdbc:$springIntegrationVersion"
    compile "org.springframework.integration:spring-integration-redis:$springIntegrationVersion"

    testCompile( "org.springframework.boot:spring-boot-starter-test" )
}


createEcsTaskDef.containerList[ 0 ].memoryLimit = 2048

if( csConfig.elasticsearchRESTURLs?.trim() && false ){
    task createEsType {
        doLast {

            List<String> esUrls = csConfig.elasticsearchRESTURLs.split( ';' ) as List
            def hosts = esUrls.collect {
                String[] pp = it.split( ":" )
                new HttpHost( pp[ 1 ].substring( 2 ), Integer.parseInt( pp.last() ), pp.first() )
            } as HttpHost[]


            RestClient restClient = RestClient.builder( hosts ).build();

            int count = 0;
            while( true ){

                println "::" + count + ">>>" + hosts.collect { it.toURI() }.join( ";" )
                try{
                    Response getMapRslt = restClient.performRequest( "GET", "/" + csConfig.searchIndexName + "?pretty" )
                    println "GET:" + getMapRslt.getEntity().content.text
                    break
                }
                catch( e ){
                    e.printStackTrace()
                }
                try{
                    Response resp = restClient.
                            performRequest( "PUT", "/" + csConfig.searchIndexName + "?pretty", Collections.emptyMap(),
                                    new NStringEntity( file( 'src/main/resources/ResourceLibraryItem.json' ).text,
                                            ContentType.APPLICATION_JSON ) )
                    println "PUT:" + resp.getEntity().content.text
                    break
                }
                catch( e ){
                    e.printStackTrace()
                    if( count > 5 ){
                        throw e;
                    }
                }

                Thread.currentThread().sleep( 5555 )
                count++;
            }
        }

    }

    runDocker.dependsOn createEsType

    startEcsService.dependsOn createEsType

}

//project.ext.jmxRemotePort = 10007
project.ext.jmxRemotePort = 10007
project.ext.debugRemotePort = 5005
project.ext.domainName = 'localhost'
//https://docs.oracle.com/cd/E15289_01/doc.40/e15062/optionxx.htm#CEGHJCIG
